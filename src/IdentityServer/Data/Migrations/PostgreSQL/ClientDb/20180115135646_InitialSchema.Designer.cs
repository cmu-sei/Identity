// Copyright 2020 Carnegie Mellon University.
// Released under a MIT (SEI) license. See LICENSE.md in the project root.

// <auto-generated />
using Identity.Clients.Abstractions;
using Identity.Clients.Data.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using System;

namespace IdentityServer.Data.Migrations.PostgreSQL.ClientDb
{
    [DbContext(typeof(ClientDbContextPostgreSQL))]
    [Migration("20180115135646_InitialSchema")]
    partial class InitialSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("Identity.Clients.Data.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AbsoluteRefreshTokenLifetime");

                    b.Property<int>("AccessTokenLifetime");

                    b.Property<int>("AccessTokenType");

                    b.Property<int>("AuthorizationCodeLifetime");

                    b.Property<string>("ClientClaimsPrefix")
                        .HasMaxLength(20);

                    b.Property<int?>("ConsentLifetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100);

                    b.Property<bool>("Enabled");

                    b.Property<string>("EnlistCode");

                    b.Property<int>("Flags");

                    b.Property<string>("GlobalId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("IdentityTokenLifetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("PairWiseSubjectSalt")
                        .HasMaxLength(50);

                    b.Property<string>("ProtocolType")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("RefreshTokenExpiration");

                    b.Property<int>("RefreshTokenUsage");

                    b.Property<int>("SlidingRefreshTokenLifetime");

                    b.HasKey("Id");

                    b.HasIndex("GlobalId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Identity.Clients.Data.ClientClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientClaim");
                });

            modelBuilder.Entity("Identity.Clients.Data.ClientEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("Type")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientEvents");
                });

            modelBuilder.Entity("Identity.Clients.Data.ClientEventHandler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientEventId");

                    b.Property<int>("ClientId");

                    b.Property<bool>("Enabled");

                    b.Property<string>("Uri")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ClientEventId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientEventHandlers");
                });

            modelBuilder.Entity("Identity.Clients.Data.ClientManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("Name");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientManagers");
                });

            modelBuilder.Entity("Identity.Clients.Data.ClientResource", b =>
                {
                    b.Property<int>("ClientId");

                    b.Property<int>("ResourceId");

                    b.HasKey("ClientId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ClientResources");
                });

            modelBuilder.Entity("Identity.Clients.Data.ClientSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("Type")
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientSecrets");
                });

            modelBuilder.Entity("Identity.Clients.Data.ClientUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<int>("Type");

                    b.Property<string>("Value")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientUris");
                });

            modelBuilder.Entity("Identity.Clients.Data.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Identity.Clients.Data.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Default");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200);

                    b.Property<bool>("Emphasize");

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Required");

                    b.Property<bool>("ShowInDiscoveryDocument");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Identity.Clients.Data.ResourceClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ResourceId");

                    b.Property<string>("Type")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceClaims");
                });

            modelBuilder.Entity("Identity.Clients.Data.ClientClaim", b =>
                {
                    b.HasOne("Identity.Clients.Data.Client", "Client")
                        .WithMany("Claims")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Identity.Clients.Data.ClientEvent", b =>
                {
                    b.HasOne("Identity.Clients.Data.Client", "Client")
                        .WithMany("Events")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Identity.Clients.Data.ClientEventHandler", b =>
                {
                    b.HasOne("Identity.Clients.Data.ClientEvent", "ClientEvent")
                        .WithMany("Handlers")
                        .HasForeignKey("ClientEventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Identity.Clients.Data.Client", "Client")
                        .WithMany("EventHandlers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Identity.Clients.Data.ClientManager", b =>
                {
                    b.HasOne("Identity.Clients.Data.Client", "Client")
                        .WithMany("Managers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Identity.Clients.Data.ClientResource", b =>
                {
                    b.HasOne("Identity.Clients.Data.Client", "Client")
                        .WithMany("Resources")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Identity.Clients.Data.Resource", "Resource")
                        .WithMany("Clients")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Identity.Clients.Data.ClientSecret", b =>
                {
                    b.HasOne("Identity.Clients.Data.Client", "Client")
                        .WithMany("Secrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Identity.Clients.Data.ClientUri", b =>
                {
                    b.HasOne("Identity.Clients.Data.Client", "Client")
                        .WithMany("Urls")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Identity.Clients.Data.ResourceClaim", b =>
                {
                    b.HasOne("Identity.Clients.Data.Resource")
                        .WithMany("Claims")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
